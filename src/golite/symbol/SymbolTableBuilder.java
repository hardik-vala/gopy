/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.symbol;

import java.util.*;
import golite.node.*;
import golite.analysis.*;

public class SymbolTableBuilder extends DepthFirstAdapter
{
    private SymbolTable symbolTable;

    public SymbolTable getSymbolTable() {
        return symbolTable;
    }

    @Override //Modified
    public void inStart(Start node) 
    {
        symbolTable = new SymbolTable();
        symbolTable.enterScope();
    }

    @Override
    public void caseAFuncTopDec(AFuncTopDec node)
    {
        symbolTable.addSymbol(node.getId().getText(), node);
    }

    @Override
    public void inASpecTypeSpec(ASpecTypeSpec node)
    {
        String name = node.getId().getText();
        symbolTable.addSymbol(name, node.getTypeExpr());
        putTypeExpr(name, node.getTypeExpr());
    }

    @Override
    public void outASpecVarSpec(ASpecVarSpec node)
    {
        {
            List<TId> ids = new ArrayList<TId>(node.getId());
            List<PExpr> exprs = node.getExpr();
            for (TId e: ids)
            {
                symbolTable.addSymbol(e.getText(), node);
            }
            if (node.getTypeExpr() != null)
            {
                for (PExpr e: exprs)
                {
                    if (typeTable.get(e).getClass() != node.getTypeExpr().getClass())
                    {
                        callTypeCheckException(e, "Expression type does not match declared variable type");
                    }

                }
                for (TId e: ids)
                {
                        typeTable.put(e, node.getTypeExpr());
                }
            }
            else
            {
                for (int i = 0; i < ids.size(); i++)
                {
                    typeTable.put(ids.get(i), typeTable.get(exprs.get(i)));
                }
            }
        }
    }

    @Override //Modified
    public void caseASpecVarSpec(ASpecVarSpec node)
    {
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                symbolTable.addSymbol(e.getText(), node);
            }
        }
    }

    @Override //Modified
    public void caseASpecTypeSpec(ASpecTypeSpec node)
    {
        symbolTable.addSymbol(node.getId().getText(), node);
    }
}
