/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.weeder;

import java.util.*;
import golite.util.*;
import golite.node.*;
import golite.exception.*;
import golite.analysis.*;

public class Weeder extends DepthFirstAdapter
{

    private LineAndPos lineAndPos = new LineAndPos();
    private boolean packageFound = false;
    private boolean inLoop = false;

    //Helper methods
    public void callWeedException(Node node, String s) {
        Integer line = lineAndPos.getLine(node);
        Integer pos = lineAndPos.getPos(node);
        String message = "[" + line + "," + pos + "] " + s;
        WeedException e = new WeedException(message);
        e.printStackTrace();
        System.exit(1);
    }

    @Override
    public void inStart(Start node)
    {
        node.apply(lineAndPos);
        packageFound = false;
        defaultIn(node);
    }

    @Override
    public void outStart(Start node)
    {
        defaultOut(node);
    }

    @Override
    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    @Override
    public void inAProgProg(AProgProg node)
    {
        if (packageFound) {
            callWeedException(node, "Programs should not have more than one package declaration");
        } else {
            packageFound = true;
        }
        defaultIn(node);
    }

    @Override
    public void outAProgProg(AProgProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgProg(AProgProg node)
    {
        inAProgProg(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PTopDec> copy = new ArrayList<PTopDec>(node.getTopDec());
            for(PTopDec e : copy)
            {
                e.apply(this);
            }
        }
        outAProgProg(node);
    }

    @Override
    public void inAVarsTopDec(AVarsTopDec node)
    {
        defaultIn(node);
    }

    @Override
    public void outAVarsTopDec(AVarsTopDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarsTopDec(AVarsTopDec node)
    {
        inAVarsTopDec(node);
        {
            List<PVarSpec> copy = new ArrayList<PVarSpec>(node.getVarSpec());
            for(PVarSpec e : copy)
            {
                e.apply(this);
            }
        }
        outAVarsTopDec(node);
    }

    @Override
    public void inATypesTopDec(ATypesTopDec node)
    {
        defaultIn(node);
    }

    @Override
    public void outATypesTopDec(ATypesTopDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypesTopDec(ATypesTopDec node)
    {
        inATypesTopDec(node);
        {
            List<PTypeSpec> copy = new ArrayList<PTypeSpec>(node.getTypeSpec());
            for(PTypeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outATypesTopDec(node);
    }

    @Override
    public void inAFuncTopDec(AFuncTopDec node)
    {
        defaultIn(node);
    }

    @Override
    public void outAFuncTopDec(AFuncTopDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncTopDec(AFuncTopDec node)
    {
        inAFuncTopDec(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PArgGroup> copy = new ArrayList<PArgGroup>(node.getArgGroup());
            for(PArgGroup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncTopDec(node);
    }

    @Override
    public void inASpecVarSpec(ASpecVarSpec node)
    {
        defaultIn(node);
    }

    @Override
    public void outASpecVarSpec(ASpecVarSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecVarSpec(ASpecVarSpec node)
    {
        inASpecVarSpec(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outASpecVarSpec(node);
    }

    @Override
    public void inASpecTypeSpec(ASpecTypeSpec node)
    {
        defaultIn(node);
    }

    @Override
    public void outASpecTypeSpec(ASpecTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecTypeSpec(ASpecTypeSpec node)
    {
        inASpecTypeSpec(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        outASpecTypeSpec(node);
    }

    @Override
    public void inAArgArgGroup(AArgArgGroup node)
    {
        defaultIn(node);
    }

    @Override
    public void outAArgArgGroup(AArgArgGroup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgArgGroup(AArgArgGroup node)
    {
        inAArgArgGroup(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        outAArgArgGroup(node);
    }

    @Override
    public void inAEmptyStmt(AEmptyStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAEmptyStmt(AEmptyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        inAEmptyStmt(node);
        outAEmptyStmt(node);
    }

    @Override
    public void inAVarDecStmt(AVarDecStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAVarDecStmt(AVarDecStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecStmt(AVarDecStmt node)
    {
        inAVarDecStmt(node);
        {
            List<PVarSpec> copy = new ArrayList<PVarSpec>(node.getVarSpec());
            for(PVarSpec e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDecStmt(node);
    }

    @Override
    public void inAShortAssignStmt(AShortAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAShortAssignStmt(AShortAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortAssignStmt(AShortAssignStmt node)
    {
        inAShortAssignStmt(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAShortAssignStmt(node);
    }

    @Override
    public void inATypeDecStmt(ATypeDecStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outATypeDecStmt(ATypeDecStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDecStmt(ATypeDecStmt node)
    {
        inATypeDecStmt(node);
        {
            List<PTypeSpec> copy = new ArrayList<PTypeSpec>(node.getTypeSpec());
            for(PTypeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDecStmt(node);
    }

    @Override
    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getLhs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getRhs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignStmt(node);
    }

    @Override
    public void inAPlusAssignStmt(APlusAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPlusAssignStmt(APlusAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAssignStmt(APlusAssignStmt node)
    {
        inAPlusAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAPlusAssignStmt(node);
    }

    @Override
    public void inAMinusAssignStmt(AMinusAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAMinusAssignStmt(AMinusAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAssignStmt(AMinusAssignStmt node)
    {
        inAMinusAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAMinusAssignStmt(node);
    }

    @Override
    public void inAStarAssignStmt(AStarAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAStarAssignStmt(AStarAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarAssignStmt(AStarAssignStmt node)
    {
        inAStarAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAStarAssignStmt(node);
    }

    @Override
    public void inASlashAssignStmt(ASlashAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outASlashAssignStmt(ASlashAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashAssignStmt(ASlashAssignStmt node)
    {
        inASlashAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outASlashAssignStmt(node);
    }

    @Override
    public void inAPercAssignStmt(APercAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPercAssignStmt(APercAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercAssignStmt(APercAssignStmt node)
    {
        inAPercAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAPercAssignStmt(node);
    }

    @Override
    public void inAAndAssignStmt(AAndAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAndAssignStmt(AAndAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAssignStmt(AAndAssignStmt node)
    {
        inAAndAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAAndAssignStmt(node);
    }

    @Override
    public void inAPipeAssignStmt(APipeAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPipeAssignStmt(APipeAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeAssignStmt(APipeAssignStmt node)
    {
        inAPipeAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAPipeAssignStmt(node);
    }

    @Override
    public void inACarotAssignStmt(ACarotAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outACarotAssignStmt(ACarotAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACarotAssignStmt(ACarotAssignStmt node)
    {
        inACarotAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outACarotAssignStmt(node);
    }

    @Override
    public void inAAmpCarotAssignStmt(AAmpCarotAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAmpCarotAssignStmt(AAmpCarotAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpCarotAssignStmt(AAmpCarotAssignStmt node)
    {
        inAAmpCarotAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAAmpCarotAssignStmt(node);
    }

    @Override
    public void inALshiftAssignStmt(ALshiftAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outALshiftAssignStmt(ALshiftAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALshiftAssignStmt(ALshiftAssignStmt node)
    {
        inALshiftAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outALshiftAssignStmt(node);
    }

    @Override
    public void inARshiftAssignStmt(ARshiftAssignStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outARshiftAssignStmt(ARshiftAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARshiftAssignStmt(ARshiftAssignStmt node)
    {
        inARshiftAssignStmt(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outARshiftAssignStmt(node);
    }

    @Override
    public void inAIncrStmt(AIncrStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAIncrStmt(AIncrStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrStmt(AIncrStmt node)
    {
        inAIncrStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIncrStmt(node);
    }

    @Override
    public void inADecrStmt(ADecrStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outADecrStmt(ADecrStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrStmt(ADecrStmt node)
    {
        inADecrStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outADecrStmt(node);
    }

    @Override
    public void inAExprStmt(AExprStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAExprStmt(AExprStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprStmt(AExprStmt node)
    {
        inAExprStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprStmt(node);
    }

    @Override
    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAPrintStmt(node);
    }

    @Override
    public void inAPrintlnStmt(APrintlnStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPrintlnStmt(APrintlnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStmt(APrintlnStmt node)
    {
        inAPrintlnStmt(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAPrintlnStmt(node);
    }

    @Override
    public void inAContinueStmt(AContinueStmt node)
    {
        if (!inLoop) {
            callWeedException(node, "Continue statements should only occur in for or while loops");
        }
        defaultIn(node);
    }

    @Override
    public void outAContinueStmt(AContinueStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStmt(AContinueStmt node)
    {
        inAContinueStmt(node);
        outAContinueStmt(node);
    }

    @Override
    public void inABreakStmt(ABreakStmt node)
    {
        if (!inLoop) {
            callWeedException(node, "Break statements should only occur in for or while loops");
        }
        defaultIn(node);
    }

    @Override
    public void outABreakStmt(ABreakStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStmt(ABreakStmt node)
    {
        inABreakStmt(node);
        outABreakStmt(node);
    }

    @Override
    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAReturnStmt(node);
    }

    @Override
    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    @Override
    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getIfBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PElseif> copy = new ArrayList<PElseif>(node.getElseif());
            for(PElseif e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getElseBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAIfElseStmt(node);
    }

    @Override //Modified
    public void inASwitchStmt(ASwitchStmt node)
    {
        defaultIn(node);
        boolean containsDefault = false;
        List<PCaseBlock> copy = new ArrayList<PCaseBlock>(node.getCaseBlock());
        for(PCaseBlock e : copy)
        {
            if (((ABlockCaseBlock) e).getCaseCondition() instanceof ADefaultCaseCondition)
            {
                if (containsDefault == true)
                {   
                    callWeedException((ABlockCaseBlock) e, "Switch statements should not have more than one default condition");
                }
                containsDefault = true;
            }
        }
    }

    @Override
    public void outASwitchStmt(ASwitchStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStmt(ASwitchStmt node) 
    {
        inASwitchStmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PCaseBlock> copy = new ArrayList<PCaseBlock>(node.getCaseBlock());
            for(PCaseBlock e : copy)
            {
                e.apply(this);
            }
        }
        outASwitchStmt(node);
    }

    @Override
    public void inAForLoopStmt(AForLoopStmt node)
    {
        inLoop = true;
        defaultIn(node);
    }

    @Override
    public void outAForLoopStmt(AForLoopStmt node)
    {
        defaultOut(node);
        inLoop = false;
    }

    @Override
    public void caseAForLoopStmt(AForLoopStmt node)
    {
        inAForLoopStmt(node);
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAForLoopStmt(node);
    }

    @Override
    public void inAWhileLoopStmt(AWhileLoopStmt node)
    {
        inLoop = true;
        defaultIn(node);
    }

    @Override
    public void outAWhileLoopStmt(AWhileLoopStmt node)
    {
        defaultOut(node);
        inLoop = false;
    }

    @Override
    public void caseAWhileLoopStmt(AWhileLoopStmt node)
    {
        inAWhileLoopStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileLoopStmt(node);
    }

    @Override
    public void inAElifElseif(AElifElseif node)
    {
        defaultIn(node);
    }

    @Override
    public void outAElifElseif(AElifElseif node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElifElseif(AElifElseif node)
    {
        inAElifElseif(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAElifElseif(node);
    }

    @Override
    public void inAConditionCondition(AConditionCondition node)
    {
        defaultIn(node);
    }

    @Override
    public void outAConditionCondition(AConditionCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionCondition(AConditionCondition node)
    {
        inAConditionCondition(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAConditionCondition(node);
    }

    @Override
    public void inABlockCaseBlock(ABlockCaseBlock node)
    {
        defaultIn(node);
    }

    @Override
    public void outABlockCaseBlock(ABlockCaseBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockCaseBlock(ABlockCaseBlock node)
    {
        inABlockCaseBlock(node);
        if(node.getCaseCondition() != null)
        {
            node.getCaseCondition().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outABlockCaseBlock(node);
    }

    @Override
    public void inAExprsCaseCondition(AExprsCaseCondition node)
    {
        defaultIn(node);
    }

    @Override
    public void outAExprsCaseCondition(AExprsCaseCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprsCaseCondition(AExprsCaseCondition node)
    {
        inAExprsCaseCondition(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAExprsCaseCondition(node);
    }

    @Override
    public void inADefaultCaseCondition(ADefaultCaseCondition node)
    {
        defaultIn(node);
    }

    @Override
    public void outADefaultCaseCondition(ADefaultCaseCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultCaseCondition(ADefaultCaseCondition node)
    {
        inADefaultCaseCondition(node);
        outADefaultCaseCondition(node);
    }

    @Override
    public void inABoolTypeExpr(ABoolTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABoolTypeExpr(ABoolTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTypeExpr(ABoolTypeExpr node)
    {
        inABoolTypeExpr(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTypeExpr(node);
    }

    @Override
    public void inAIntTypeExpr(AIntTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAIntTypeExpr(AIntTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeExpr(AIntTypeExpr node)
    {
        inAIntTypeExpr(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeExpr(node);
    }

    @Override
    public void inAFloatTypeExpr(AFloatTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAFloatTypeExpr(AFloatTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTypeExpr(AFloatTypeExpr node)
    {
        inAFloatTypeExpr(node);
        if(node.getFloat64() != null)
        {
            node.getFloat64().apply(this);
        }
        outAFloatTypeExpr(node);
    }

    @Override
    public void inARuneTypeExpr(ARuneTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outARuneTypeExpr(ARuneTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuneTypeExpr(ARuneTypeExpr node)
    {
        inARuneTypeExpr(node);
        if(node.getRune() != null)
        {
            node.getRune().apply(this);
        }
        outARuneTypeExpr(node);
    }

    @Override
    public void inAStringTypeExpr(AStringTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAStringTypeExpr(AStringTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeExpr(AStringTypeExpr node)
    {
        inAStringTypeExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeExpr(node);
    }

    @Override
    public void inACustomTypeExpr(ACustomTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outACustomTypeExpr(ACustomTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomTypeExpr(ACustomTypeExpr node)
    {
        inACustomTypeExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACustomTypeExpr(node);
    }

    @Override
    public void inAArrayTypeExpr(AArrayTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAArrayTypeExpr(AArrayTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypeExpr(AArrayTypeExpr node)
    {
        inAArrayTypeExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        outAArrayTypeExpr(node);
    }

    @Override
    public void inASliceTypeExpr(ASliceTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outASliceTypeExpr(ASliceTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASliceTypeExpr(ASliceTypeExpr node)
    {
        inASliceTypeExpr(node);
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        outASliceTypeExpr(node);
    }

    @Override
    public void inAStructTypeExpr(AStructTypeExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAStructTypeExpr(AStructTypeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructTypeExpr(AStructTypeExpr node)
    {
        inAStructTypeExpr(node);
        {
            List<PArgGroup> copy = new ArrayList<PArgGroup>(node.getArgGroup());
            for(PArgGroup e : copy)
            {
                e.apply(this);
            }
        }
        outAStructTypeExpr(node);
    }

    @Override
    public void inAEmptyExpr(AEmptyExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAEmptyExpr(AEmptyExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpr(AEmptyExpr node)
    {
        inAEmptyExpr(node);
        outAEmptyExpr(node);
    }

    @Override
    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExpr(node);
    }

    @Override
    public void inASubtractExpr(ASubtractExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outASubtractExpr(ASubtractExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractExpr(ASubtractExpr node)
    {
        inASubtractExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubtractExpr(node);
    }

    @Override
    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExpr(node);
    }

    @Override
    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    @Override
    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpr(node);
    }

    @Override
    public void inABitAndExpr(ABitAndExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitAndExpr(ABitAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitAndExpr(ABitAndExpr node)
    {
        inABitAndExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitAndExpr(node);
    }

    @Override
    public void inABitOrExpr(ABitOrExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitOrExpr(ABitOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitOrExpr(ABitOrExpr node)
    {
        inABitOrExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitOrExpr(node);
    }

    @Override
    public void inABitXorExpr(ABitXorExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitXorExpr(ABitXorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitXorExpr(ABitXorExpr node)
    {
        inABitXorExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitXorExpr(node);
    }

    @Override
    public void inABitClearExpr(ABitClearExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitClearExpr(ABitClearExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitClearExpr(ABitClearExpr node)
    {
        inABitClearExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitClearExpr(node);
    }

    @Override
    public void inABitLshiftExpr(ABitLshiftExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitLshiftExpr(ABitLshiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitLshiftExpr(ABitLshiftExpr node)
    {
        inABitLshiftExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitLshiftExpr(node);
    }

    @Override
    public void inABitRshiftExpr(ABitRshiftExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitRshiftExpr(ABitRshiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitRshiftExpr(ABitRshiftExpr node)
    {
        inABitRshiftExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABitRshiftExpr(node);
    }

    @Override
    public void inAPosExpr(APosExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAPosExpr(APosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpr(APosExpr node)
    {
        inAPosExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPosExpr(node);
    }

    @Override
    public void inANegExpr(ANegExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outANegExpr(ANegExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpr(ANegExpr node)
    {
        inANegExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANegExpr(node);
    }

    @Override
    public void inABitCompExpr(ABitCompExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outABitCompExpr(ABitCompExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitCompExpr(ABitCompExpr node)
    {
        inABitCompExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABitCompExpr(node);
    }

    @Override
    public void inANotExpr(ANotExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outANotExpr(ANotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        inANotExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANotExpr(node);
    }

    @Override
    public void inAEqExpr(AEqExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAEqExpr(AEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpr(AEqExpr node)
    {
        inAEqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExpr(node);
    }

    @Override
    public void inANeqExpr(ANeqExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outANeqExpr(ANeqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExpr(ANeqExpr node)
    {
        inANeqExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANeqExpr(node);
    }

    @Override
    public void inALtExpr(ALtExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outALtExpr(ALtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpr(ALtExpr node)
    {
        inALtExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALtExpr(node);
    }

    @Override
    public void inALteExpr(ALteExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outALteExpr(ALteExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteExpr(ALteExpr node)
    {
        inALteExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALteExpr(node);
    }

    @Override
    public void inAGtExpr(AGtExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAGtExpr(AGtExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpr(AGtExpr node)
    {
        inAGtExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExpr(node);
    }

    @Override
    public void inAGteExpr(AGteExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAGteExpr(AGteExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteExpr(AGteExpr node)
    {
        inAGteExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGteExpr(node);
    }

    @Override
    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExpr(node);
    }

    @Override
    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrExpr(node);
    }

    @Override
    public void inAFuncCallExpr(AFuncCallExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAFuncCallExpr(AFuncCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallExpr(AFuncCallExpr node)
    {
        inAFuncCallExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncCallExpr(node);
    }

    @Override
    public void inAAppendExpr(AAppendExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAAppendExpr(AAppendExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppendExpr(AAppendExpr node)
    {
        inAAppendExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAppendExpr(node);
    }

    @Override
    public void inATypeCastExpr(ATypeCastExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outATypeCastExpr(ATypeCastExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeCastExpr(ATypeCastExpr node)
    {
        inATypeCastExpr(node);
        if(node.getTypeExpr() != null)
        {
            node.getTypeExpr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outATypeCastExpr(node);
    }

    @Override
    public void inAArrayElemExpr(AArrayElemExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAArrayElemExpr(AArrayElemExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayElemExpr(AArrayElemExpr node)
    {
        inAArrayElemExpr(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        outAArrayElemExpr(node);
    }

    @Override
    public void inAFieldExpr(AFieldExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAFieldExpr(AFieldExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldExpr(AFieldExpr node)
    {
        inAFieldExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFieldExpr(node);
    }

    @Override
    public void inAVariableExpr(AVariableExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAVariableExpr(AVariableExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExpr(AVariableExpr node)
    {
        inAVariableExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariableExpr(node);
    }

    @Override
    public void inAIntLitExpr(AIntLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAIntLitExpr(AIntLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLitExpr(AIntLitExpr node)
    {
        inAIntLitExpr(node);
        if(node.getIntLit() != null)
        {
            node.getIntLit().apply(this);
        }
        outAIntLitExpr(node);
    }

    @Override
    public void inAOctLitExpr(AOctLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAOctLitExpr(AOctLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOctLitExpr(AOctLitExpr node)
    {
        inAOctLitExpr(node);
        if(node.getOctLit() != null)
        {
            node.getOctLit().apply(this);
        }
        outAOctLitExpr(node);
    }

    @Override
    public void inAHexLitExpr(AHexLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAHexLitExpr(AHexLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexLitExpr(AHexLitExpr node)
    {
        inAHexLitExpr(node);
        if(node.getHexLit() != null)
        {
            node.getHexLit().apply(this);
        }
        outAHexLitExpr(node);
    }

    @Override
    public void inAFloatLitExpr(AFloatLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAFloatLitExpr(AFloatLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatLitExpr(AFloatLitExpr node)
    {
        inAFloatLitExpr(node);
        if(node.getFloatLit() != null)
        {
            node.getFloatLit().apply(this);
        }
        outAFloatLitExpr(node);
    }

    @Override
    public void inARuneLitExpr(ARuneLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outARuneLitExpr(ARuneLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuneLitExpr(ARuneLitExpr node)
    {
        inARuneLitExpr(node);
        if(node.getRuneLit() != null)
        {
            node.getRuneLit().apply(this);
        }
        outARuneLitExpr(node);
    }

    @Override
    public void inAInterpretedStringLitExpr(AInterpretedStringLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outAInterpretedStringLitExpr(AInterpretedStringLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterpretedStringLitExpr(AInterpretedStringLitExpr node)
    {
        inAInterpretedStringLitExpr(node);
        if(node.getInterpretedStringLit() != null)
        {
            node.getInterpretedStringLit().apply(this);
        }
        outAInterpretedStringLitExpr(node);
    }

    @Override
    public void inARawStringLitExpr(ARawStringLitExpr node)
    {
        defaultIn(node);
    }

    @Override
    public void outARawStringLitExpr(ARawStringLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARawStringLitExpr(ARawStringLitExpr node)
    {
        inARawStringLitExpr(node);
        if(node.getRawStringLit() != null)
        {
            node.getRawStringLit().apply(this);
        }
        outARawStringLitExpr(node);
    }
}
