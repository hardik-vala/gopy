-------------Mon Feb 15th---------------
prog = pack_dec top_dec*
pack_dec = package id semi
top_dec = top_var_dec | top_type_dec | func_dec
func_dec = func id lparen args rparen type? lbrace stmt* rbrace semi
args = (args_of_type comma)* args_of_type
args_of_type = id_list type
id_list = id (comma id)*
type = int | float64 | string | rune | id

-------------Tue Feb 16th---------------
top_var_dec = var var_dec | var lparen var_dec* rparen semi
var_dec = id_list type semi | id_list type? eq exp_list semi
exp_list = exp (comma exp)*

top_type_dec = type type_dec | type lparen type_dec* rparen semi
type_dec = id type semi | id struct lbrace (id_list type semi)* rbrace semi

type = list_type | def_type
def_type = int | float64 | string | rune | id
list_type = array | slice
array = lbracket int_lit rbracket prim_type
slice = lbracket rbracket prim_type

stmt = (exp_stmt | assign | dec | short_dec ...) semi

dec = top_var_dec | top_type_dec | short_dec

assign = reg_assign | op_assign
reg_assign = id_list eq exp_list
op_assign = id op exp

exp_stmt = exp

short_dec = id_list short_assign expr_lit semi

increment_smt = id inc
decrement_smt = id dec

print_smt = print lparen exp_list rparen
println_smt = println lparen exp_list rparen

return_smt = return exp?

break_smt = break
continue_smt = continue

if_smt = if exp lbrace smt* (else_if)* rbrace
if_else smt = if exp lbrace smt* (else_if)* rbrace else lbrace smt* rbrace
elif = rbrace else if exp lbrace smt*

loop_smt = for_loop | while_loop
for_loop = for short_assign semi expr semi increment lbrace smt* rbrace
while_loop = for expr? lbrace smt* rbrace