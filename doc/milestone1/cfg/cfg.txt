-------------Mon Feb 15th---------------
prog = pack_dec top_dec*
pack_dec = package id semi
top_dec = top_var_dec | top_type_dec | func_dec
func_dec = func id lparen args rparen type? lbrace stmt* rbrace semi
args = (args_of_type comma)* args_of_type
args_of_type = id_list type
id_list = id (comma id)*
type = int | float64 | string | rune | id

-------------Tue Feb 16th---------------
exp_list = exp (comma exp)*

array = lbracket int_lit rbracket prim_type
slice = lbracket rbracket prim_type

assign = reg_assign | op_assign
reg_assign = id_list eq exp_list
op_assign = id op exp

exp_stmt = exp

short_dec = id_list short_assign expr_lit semi

print_smt = print lparen exp_list rparen
println_smt = println lparen exp_list rparen

return_smt = return exp?

break_smt = break
continue_smt = continue

if_smt = if exp lbrace smt* (else_if)* rbrace
if_else smt = if exp lbrace smt* (else_if)* rbrace else lbrace smt* rbrace
elif = rbrace else if exp lbrace smt*

loop_smt = for_loop | while_loop
for_loop = for short_assign semi expr semi increment lbrace smt* rbrace
while_loop = for expr? lbrace smt* rbrace

-------------Wed Feb 17th---------------
switch = switch (simple_stmt semi)? exp? lbrace switch_clause rbrace semi
simple_stmt = empty_stmt | exp_stmt | inc_decrement | assign | short_dec
stmt = simple_stmt | top_var_dec | top_type_dec | print_stmt | println_stmt | return_stmt | if_stmt | if_else_stmt | switch_stmt | loop_stmt | break_stmt | continue_stmt
stmt_list = (stmt semi)* stmt?
inc_decrement = id (increment | decrement)

type = list_type | def_type | string_type
def_type = int | float64 | rune | id 
string_type = string
list_type = array | slice

top_var_dec = var var_dec | var lparen (var_dec semi)* var_dec? rparen
var_dec = id_list type | id_list type? eq exp_list

top_type_dec = type type_dec | type lparen (type_dec semi)* type_dec? rparen
type_dec = id type | id struct lbrace (id_list type semi)* (id_list type)? rbrace

func_exp = id lparen exp_list rparen
append_exp = append lparen id comma exp rparen
cast_exp = type lparen expr rparen
